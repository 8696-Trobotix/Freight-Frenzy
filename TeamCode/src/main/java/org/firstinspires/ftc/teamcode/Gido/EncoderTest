/*
Don't know how to use encoders? Cry about it because neither do I.
*/
package org.firstinspires.ftc.teamcode.Gido;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.util.ElapsedTime; // ITS ALIVE

import com.qualcomm.robotcore.hardware.DcMotor; // Movey thingy

@Autonomous(name="EncoderTest", group="Linear Opmode")
public class EncoderTest extends LinearOpMode {

    private DcMotor rearLeft, frontRight,
    private ElapsedTime     runtime = new ElapsedTime(); // Motar :O
}
@Override
public void runOpMode() { // This class does something idk ¯\_(ツ)_/¯

    rearRight = hardwareMap.get(DcMotor.class, "RightistMoter");
    rearLeft = hardwareMap.get(DcMotor.class, "MotarLeft");

    rearLeft.setDirection(DcMotor.Direction.REVERSE);
    RightMotrr.setDirection(DcMotor.Direction.FORWARD); // VROOoooOOOOM VROOOOOOOOOM

    leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

    leftDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
    rightDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER); // Magic

    telemetry.addData("Starting at",  "%7d :%7d",
                        leftDrive.getCurrentPosition(),
                        rightDrive.getCurrentPosition()); // y is it so indented
    telemetry.update();

           waitForStart();
}